{
	"template": {
		"scope": "python",
		"prefix": "template",
		"body": [
		  "\"\"\"",
		  "URL:${1:https://atcoder.jp/contests/abc001/tasks/abc001_1}",
		  "DATE:$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE",
		  "\"\"\"",
		  "import sys",
		  "# sys.setrecursionlimit(10**9)",
		  "# from copy import deepcopy",
		  "# from decimal import Decimal",
		  "# from math import ceil,floor",
		  "# from collections import deque,Counter",
		  "# from heapq import heapify,heappop,heappush",
		  "# from itertools import accumulate,product,permutations,combinations,combinations_with_replacement",
		  "# from bisect import bisect_left,bisect_right",
		  "# from functools import lru_cache#@lru_cache(maxsize=None)",
		  "",
		  "read = sys.stdin.read",
		  "readline = sys.stdin.readline",
		  "readlines = sys.stdin.readlines",
		  "",
		  "read_int = lambda y = 0: int(readline()) + y",
		  "read_ints = lambda y = 0: map(lambda x: int(x) + y,readline().split())",
		  "read_str = lambda: readline().rstrip()",
		  "read_strs = lambda: readline().rstrip().split()",
		  "read_ints_list = lambda y = 0: list(map(lambda x:int(x) + y,readline().split()))",
		  "read_ints_array = lambda h, y = 0:list(list(map(lambda x:int(x)+y,readline().split())) for _ in range(h))",
		  "read_strs_list = lambda: list(map(str,list(readline().rstrip())))",
		  "read_strs_array = lambda h:list(list(readline().rstrip()) for _ in range(h))",
		  "",
		  "# solve",
		  "",
		  "def main(${2}):",
		  "    ",
		  "    ",
		  "    return 0",
		  "",
		  "if __name__=='__main__':",
		  "    main()"
		],
		"description": ""
	  },
	"int(input())":{
		"scope": "python",
		"prefix": "int",
		"body": "int(input())",
		"description": "int(input())"
	},
	"for loop":{
		"scope": "python",
		"prefix": "for",
		"body": "for ${1:i} in range(${2:n}):",
		"description": "for loop"
	},
	"input nsequence":{
		"scope": "python",
		"prefix": "map",
		"body": "map(int,input().split())",
		"description": "input intmap"
	},
	"define grid":{
		"scope": "python",
		"prefix": "[][]",
		"body":"[[${1:-1}]*w for i in range(h)]",
		"description": "define 2Dgrid"
	},
	"import itertools":{
		"scope": "python",
		"prefix": "from",
		"body": [
			"from itertools import accumulate,product,permutations,combinations,combinations_with_replacement",
			"'''",
			"accumulate([1,2,3,4,5]) --> 1 3 6 10 15",
			"product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111",
			"permutations(range(3)) --> 012 021 102 120 201 210",
			"combinations('ABCD', 2) --> AB AC AD BC BD CD",
			"combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC",
			"'''\n",
		],
		"description": "import itertools"
	},
	"import bisect":{
		"scope": "python",
		"prefix": "from",
		"body": [
			"from bisect import bisect_left,bisect_right",
			"'''",
			"bisect_left(vec,key)-->key未満の数",
			"bisect_right(vec,key)-->key以下の数",
			"'''\n",
		],
		"description": "import itertools"
	},
	"release recursion limit":{
		"scope": "python",
		"prefix": "sys",
		"body": "sys.setrecursionlimit(500**2)",
		"description": "Release the recursion limit for python"
	},
	"graph template": {
		"scope": "python",
		"prefix": "G",
		"body": [
			"G = [[] for _ in range(${0:n})]",
			"for i in range(${1:n}):",
			"    a,b = map(int,input().split())",
		  "    a,b = a-1,b-1",
		  "    G[a].append(b)",
		  "    G[b].append(a)"
		],
		"description": "graph template"
	},
	"dxdy":{
		"scope": "python",
		"prefix": "dxdy",
		"body": [
			"dxdy = [(1,0),(-1,0),(0,-1),(0,1)]#(1,1),(-1,-1),(-1,1),(1,-1)",
			"",
			"for dx,dy in dxdy:",
			"    nx = x + dx",
			"    ny = y + dy",
			"    if nx<0 or nx>=w or ny<0 or ny>=h:",
			"        continue",
		],
		"description": "dxdy",
	},
	"month":{
		"scope": "python",
		"prefix": "month",
		"body": [
			"month_today = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}",
			"month_acc = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]",
		],
		"description": "month to day"
	},
	"INF":{
		"scope": "python",
		"prefix": "INF",
		"body": [
			"INF = float('inf')"
		],
		"description": "inf"
	},
}