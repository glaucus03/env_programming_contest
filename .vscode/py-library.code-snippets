{
	"BitFullSearch":{
		"scope": "python",
		"prefix": "bit",
		"body": [
			"bit_len = n",
			"for i in range(2**bit_len):",
			"    for j in range(bit_len):",
			"        if (i>>j &1):",
		],
		"description": "bit全探索のスニペット"
	},
	"BFS": {
		"scope": "python",
		"prefix": "BFS",
		"body": [
		  "def BFS(que,ans):",
		  "    ans+=1",
		  "    q2 = deque([])",
		  "    ",
		  "    while que:",
		  "        ",
		  "        x,y = que.popleft()",
		  "   ",
		  "        for k,(dx,dy) in enumerate(dxdy):",
		  "            nx = x + dx",
		  "            ny = y + dy",
		  "",
		  "            if nx<0 or nx>=w or ny<0 or ny>=h:",
		  "                continue",
		  "",
		  "            if visited[ny][nx]:",
		  "                continue",
		  "            ",
		  "            visited[ny][nx] = True",
		  "            q2.append((nx,ny))",
		  "            ",
		  "    return q2,ans"
		],
		"description": "BFS"
	  },
	  "DFS": {
		"scope": "python",
		"prefix": "DFS",
		"body": [
		  "#タイムスタンプを記録するDFS",
		  "from collections import deque",
		  "def DFS(G,v,ptr):",
		  "    ptr+=1",
		  "    first_order[v] = ptr",
		  "    seen[v] = True",
		  "    ",
		  "    for next_v in G[v]:",
		  "        if seen[next_v]:",
		  "            continue",
		  "        ptr = DFS(G,next_v,ptr)",
		  "    ",
		  "    ptr+=1",
		  "    last_order[v] = ptr",
		  "    ",
		  "    return ptr",
		  "    ",
		  "def main():",
		  "    global n,G",
		  "    global seen,first_order,last_order,ptr",
		  "    ",
		  "    n = read_int()",
		  "    ",
		  "    G = [[] for _ in range(n)]",
		  "    for i in range(n):",
		  "        u,k,*vs = map(int,input().split())",
		  "        for v in vs:",
		  "            G[u-1].append(v-1)",
		  "    ",
		  "    seen = [False]*n",
		  "    first_order = [0]*n",
		  "    last_order = [0]*n",
		  "    ptr = 0",
		  "    ",
		  "    DFS(G,0,ptr)",
		  "    ",
		  "    # print(first_order,last_order)    ",
		],
		"description": "DFS"
	  },
	  "LCS": {
		"prefix": "LCS",
		"body": [
		  "def LCS(s1, s2):",
		  "    \"\"\"",
		  "    s1,s2の最長共通部分の長さのみ求める。部分列はわからない",
		  "    \"\"\"",
		  "    dp = []",
		  "    for s2_k in s2:",
		  "        bgn_idx = 0",
		  "        for i, cur_idx in enumerate(dp):",
		  "            chr_idx = s1.find(s2_k, bgn_idx) + 1",
		  "            if not chr_idx:",
		  "                break",
		  "            dp[i] = min(cur_idx, chr_idx)",
		  "            bgn_idx = cur_idx",
		  "        else:",
		  "            chr_idx = s1.find(s2_k, bgn_idx) + 1",
		  "            if chr_idx:",
		  "                dp.append(chr_idx)",
		  "    return len(dp)"
		],
		"description": "LCS"
	  }
}